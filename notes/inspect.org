* Check API inspection methods

Import Visitor

#+NAME: import-visit
#+begin_src python
  import ast

  class ImportVisitor(ast.NodeVisitor):
      def __init__(self):
          self.imports = set()
          self.aliases = {}

      def visit_Import(self, node):
          for name in node.names:
              namespace = tuple(name.name.split('.'))
              if name.asname is None:
                  self.imports.add(namespace)
              else:
                  self.imports.add(namespace)
                  self.aliases[name.asname] = namespace

      def visit_ImportFrom(self, node):
          if node.module is None: # relative import
              return

          partial_namespace = tuple(node.module.split('.'))
          for name in node.names:
              namespace = partial_namespace + (name.name,)
              self.imports[name.asname or name.name] = namespace
#+end_src

#+begin_src python :noweb yes :results output
  <<import-visit>>

  source = (
   'import requests\n'
   'import numpy as np\n'
   'import numpy.random as rnd\n'
   'import urllib.requests\n'
  )

  visitor = ImportVisitor()
  visitor.visit(ast.parse(source))
  print(visitor.imports)
  print(visitor.aliases)
#+end_src

#+RESULTS:
: {('numpy',), ('requests',), ('urllib', 'requests'), ('numpy', 'random')}
: {'np': ('numpy',), 'rnd': ('numpy', 'random')}


Measure calls

#+NAME: api-visit
#+begin_src python
  import ast
  import collections

  class APIVisitor(ast.NodeVisitor):
      def __init__(self, aliases, imports):
          self.aliases = aliases
          self.imports = imports
          self.api = collections.defaultdict(lambda:
              collections.defaultdict(lambda: {
                  'count': 0,
                  'n_args': collections.defaultdict(int),
                  'kwargs': collections.defaultdict(int),
              }))

      def visit_Call(self, node):
          if not isinstance(node.func, (ast.Attribute, ast.Name)):
              return

          # functions statistics
          num_args = len(node.args) + len(node.keywords)
          keywords = {k.arg for k in node.keywords}

          _node = node.func
          path = []

          while isinstance(_node, ast.Attribute):
              path.insert(0, _node.attr)
              _node = _node.value

          if isinstance(_node, ast.Name):
              if _node.id in self.aliases:
                  path = list(self.aliases[_node.id]) + path
              else:
                  path.insert(0, _node.id)

          for i in range(len(path)):
              if tuple(path[:i+1]) in self.imports:
                  base_namespace = path[0]

                  self.api[base_namespace][tuple(path)]['count'] += 1
                  self.api[base_namespace][tuple(path)]['n_args'][num_args] += 1
                  for keyword in keywords:
                      self.api[base_namespace][tuple(path)]['kwargs'][keyword] += 1
                  break
#+end_src


#+begin_src python :noweb yes :results output
  <<import-visit>>
  <<api-visit>>

  source = (
   'import requests\n'
   'import numpy as np\n'
   'import numpy.random as rnd\n'
   'import urllib.requests\n'
   'np.random.random((1, 2))\n'
   'urllib.requests.request()\n'
  )

  source_ast = ast.parse(source)

  import_visitor = ImportVisitor()
  import_visitor.visit(source_ast)

  api_visitor = APIVisitor(imports=import_visitor.imports, aliases=import_visitor.aliases)
  api_visitor.visit(source_ast)

  for namespace in api_visitor.api:
      print('namespace', namespace)
      for function in api_visitor.api[namespace]:
          print(api_visitor.api[namespace][function])
#+end_src

#+RESULTS:
: namespace numpy
: {'count': 1, 'n_args': defaultdict(<class 'int'>, {1: 1}), 'kwargs': defaultdict(<class 'int'>, {})}
: namespace urllib
: {'count': 1, 'n_args': defaultdict(<class 'int'>, {0: 1}), 'kwargs': defaultdict(<class 'int'>, {})}
