function, function_count, top_num_args, top_num_args_count, top_keyword, top_keyword_count
pyarrow.Array, 1, 1, 1, , 
pyarrow.UnionArray.from_sparse, 1, 2, 1, , 
pyarrow.UnionArray.from_dense, 1, 3, 1, , 
pyarrow.utf8, 1, 0, 1, , 
pyarrow.Tensor, 1, 0, 1, , 
pyarrow.lib.tzinfo_to_string, 1, 1, 1, , 
pyarrow.lib.string_to_tzinfo, 1, 1, 1, , 
pyarrow.cuda.Context, 1, 1, 1, , 
pyarrow.cuda.IpcMemHandle.from_buffer, 1, 1, 1, , 
pyarrow.gandiva.get_registered_function_signatures, 1, 0, 1, , 
pyarrow.tests.test_parquet._test_read_common_metadata_files, 1, 2, 1, , 
pyarrow.tests.test_parquet._test_write_to_dataset_with_partitions, 1, 2, 1, filesystem, 1
pyarrow.tests.test_parquet._test_write_to_dataset_no_partitions, 1, 2, 1, filesystem, 1
pyarrow.have_libhdfs, 1, 0, 1, , 
pyarrow.have_libhdfs3, 1, 0, 1, , 
pyarrow.foreign_buffer, 1, 3, 1, , 
pyarrow.Buffer, 1, 0, 1, , 
pyarrow.MessageReader.open_stream, 1, 1, 1, , 
pyarrow.get_record_batch_size, 1, 1, 1, , 
pyarrow.jvm.jvm_buffer, 1, 1, 1, , 
pyarrow.jvm.field, 1, 1, 1, , 
pyarrow.jvm.record_batch, 1, 1, 1, , 
pyarrow.logging_memory_pool, 1, 1, 1, , 
pyarrow.get_include, 1, 0, 1, , 
pyarrow.parquet.ParquetManifest, 1, 3, 1, metadata_nthreads, 1
pyarrow.plasma.tf_plasma_op.tensor_to_plasma, 1, 3, 1, plasma_store_socket_name, 1
pyarrow.plasma.tf_plasma_op.plasma_to_tensor, 1, 3, 1, dtype, 1
pyarrow.plasma.build_plasma_tensorflow_op, 1, 0, 1, , 
pyarrow.NAType, 1, 0, 1, , 
pyarrow.Schema, 1, 0, 1, , 
pyarrow.type_for_alias, 1, 1, 1, , 
pyarrow.Schema.from_pandas, 1, 1, 1, , 
pyarrow.SerializedPyObject.from_components, 1, 1, 1, , 
pyarrow.register_torch_serialization_handlers, 1, 1, 1, , 
pyarrow.types.is_unicode, 1, 1, 1, , 
pyarrow.tests.test_parquet._test_dataframe, 2, 2, 2, seed, 2
pyarrow.compress, 2, 2, 1, codec, 2
pyarrow.CompressedOutputStream, 2, 2, 2, , 
pyarrow.RecordBatchFileReader, 2, 1, 2, , 
pyarrow.read_schema, 2, 1, 2, , 
pyarrow.jvm.schema, 2, 1, 2, , 
pyarrow.jvm.array, 2, 1, 2, , 
pyarrow.default_memory_pool, 2, 0, 2, , 
pyarrow.proxy_memory_pool, 2, 1, 2, , 
pyarrow.set_memory_pool, 2, 1, 2, , 
pyarrow.cpu_count, 2, 0, 2, , 
pyarrow.set_cpu_count, 2, 1, 2, , 
pyarrow.lib.is_named_tuple, 2, 1, 2, , 
pyarrow.read_serialized, 2, 1, 2, , 
pyarrow.deserialize_components, 2, 1, 2, , 
pyarrow.read_tensor, 2, 1, 2, , 
pyarrow.types.is_unsigned_integer, 2, 1, 2, , 
pyarrow.types.is_dictionary, 2, 1, 2, , 
pyarrow.types.is_union, 2, 1, 2, , 
pyarrow.types.is_fixed_size_binary, 2, 1, 2, , 
pyarrow.types.is_temporal, 2, 1, 2, , 
pyarrow.types.is_primitive, 2, 1, 2, , 
pyarrow.types.is_list, 3, 1, 3, , 
pyarrow.types.is_boolean, 3, 1, 3, , 
pyarrow.types.is_null, 3, 1, 3, , 
pyarrow.types.is_binary, 3, 1, 3, , 
pyarrow.types.is_decimal, 3, 1, 3, , 
pyarrow.read_record_batch, 3, 2, 3, , 
pyarrow.tests.util.get_modified_env_with_pythonpath, 3, 0, 3, , 
pyarrow.gandiva.make_projector, 3, 3, 3, , 
pyarrow.decompress, 3, 3, 1, codec, 3
pyarrow.RecordBatchFileWriter, 3, 2, 3, , 
pyarrow.RecordBatchStreamReader, 3, 1, 3, , 
pyarrow.read_message, 3, 1, 3, , 
pyarrow.parquet.PartitionSet, 3, 2, 3, , 
pyarrow.localfs.read_parquet, 3, 2, 3, schema, 1
pyarrow.get_tensor_size, 3, 1, 3, , 
pyarrow.deserialize_from, 3, 3, 2, context, 1
pyarrow.types.is_signed_integer, 3, 1, 3, , 
pyarrow.types.is_nested, 3, 1, 3, , 
pyarrow.types.is_integer_value, 3, 1, 3, , 
pyarrow.types.is_struct, 4, 1, 4, , 
pyarrow.types.is_time, 4, 1, 4, , 
pyarrow.types.is_date, 4, 1, 4, , 
pyarrow.types.is_string, 4, 1, 4, , 
pyarrow.total_allocated_bytes, 4, 0, 4, , 
pyarrow.StringArray.from_buffers, 4, 6, 3, , 
pyarrow.MockOutputStream, 4, 0, 4, , 
pyarrow.create_memory_map, 4, 2, 4, , 
pyarrow.serialize_pandas, 4, 2, 3, preserve_index, 2
pyarrow.deserialize_pandas, 4, 1, 3, use_threads, 1
pyarrow.parquet.write_to_dataset, 4, 4, 2, filesystem, 2
pyarrow.plasma.buffers_equal, 4, 2, 4, , 
pyarrow.write_tensor, 4, 2, 4, , 
pyarrow.types.is_float_value, 4, 1, 4, , 
pyarrow.ListArray.from_arrays, 5, 2, 5, , 
pyarrow.types.is_timestamp, 5, 1, 5, , 
pyarrow.Array.from_buffers, 5, 3, 3, offset, 2
pyarrow.dictionary, 5, 2, 4, ordered, 1
pyarrow.hdfs.connect, 5, 2, 2, host, 2
pyarrow.parquet.read_pandas, 5, 1, 4, memory_map, 1
pyarrow.parquet.ParquetDatasetPiece, 5, 1, 3, row_group, 2
pyarrow.serialize_to, 5, 2, 3, context, 1
pyarrow.types.is_boolean_value, 5, 1, 5, , 
pyarrow.types.is_floating, 6, 1, 6, , 
pyarrow.FixedSizeBufferWriter, 6, 1, 6, , 
pyarrow.CompressedInputStream, 6, 2, 6, , 
pyarrow.parquet.read_metadata, 6, 1, 6, , 
pyarrow.parquet.write_metadata, 6, 2, 6, , 
pyarrow.types.is_integer, 7, 1, 7, , 
pyarrow.allocate_buffer, 7, 1, 5, resizable, 2
pyarrow.ipc.open_file, 7, 1, 7, , 
pyarrow.default_serialization_context, 7, 0, 7, , 
pyarrow.SerializationContext, 7, 0, 7, , 
pyarrow.from_numpy_dtype, 7, 1, 7, , 
pyarrow.Table.from_pydict, 7, 1, 4, metadata, 2
pyarrow.StructArray.from_arrays, 8, 2, 7, names, 2
pyarrow.ipc.open_stream, 8, 1, 8, , 
pyarrow.plasma.start_plasma_store, 8, 1, 5, plasma_store_memory, 6
pyarrow.date64, 9, 0, 9, , 
pyarrow.gandiva.make_filter, 9, 2, 9, , 
pyarrow.concat_tables, 9, 1, 9, , 
pyarrow.OSFile, 9, 2, 8, mode, 8
pyarrow.parquet.ParquetWriter, 9, 3, 4, version, 5
pyarrow.uint64, 10, 0, 10, , 
pyarrow.float16, 10, 0, 10, , 
pyarrow.union, 10, 2, 10, mode, 8
pyarrow.RecordBatchStreamWriter, 10, 2, 10, , 
pyarrow.uint32, 11, 0, 11, , 
pyarrow.gandiva.TreeExprBuilder, 11, 0, 11, , 
pyarrow.output_stream, 11, 2, 6, null, 4
pyarrow.Column.from_array, 11, 2, 11, , 
pyarrow.plasma.ObjectID, 11, 1, 11, , 
pyarrow.serialize, 11, 2, 9, context, 5
pyarrow.date32, 12, 0, 12, , 
pyarrow.null, 12, 0, 12, , 
pyarrow.memory_map, 12, 2, 11, mode, 7
pyarrow.Array.from_pandas, 12, 2, 6, type, 10
pyarrow.parquet.ParquetFile, 12, 1, 11, metadata, 1
pyarrow.bool_, 13, 0, 13, , 
pyarrow.deserialize, 14, 1, 9, context, 3
pyarrow.parquet.write_table, 14, 2, 10, compression, 2
pyarrow.int8, 15, 0, 15, , 
pyarrow.time32, 15, 1, 15, , 
pyarrow.time64, 15, 1, 15, , 
pyarrow.Tensor.from_numpy, 15, 1, 15, , 
pyarrow.uint8, 16, 0, 16, , 
pyarrow.uint16, 16, 0, 16, , 
pyarrow.float32, 17, 0, 17, , 
pyarrow.float64, 17, 0, 17, , 
pyarrow.parquet.read_table, 17, 1, 14, columns, 2
pyarrow.PythonFile, 17, 2, 9, mode, 9
pyarrow.int64, 18, 0, 18, , 
pyarrow.DictionaryArray.from_arrays, 18, 2, 13, mask, 2
pyarrow.column, 18, 2, 18, , 
pyarrow.decimal128, 19, 2, 18, precision, 7
pyarrow.Table.from_batches, 19, 1, 15, , 
pyarrow.RecordBatch.from_pandas, 20, 1, 14, preserve_index, 5
pyarrow.int16, 21, 0, 21, , 
pyarrow.BufferReader, 21, 1, 21, , 
pyarrow.BufferOutputStream, 21, 0, 21, , 
pyarrow.binary, 26, 0, 16, length, 1
pyarrow.RecordBatch.from_arrays, 28, 2, 28, names, 5
pyarrow.string, 28, 0, 28, , 
pyarrow.struct, 29, 1, 29, , 
pyarrow.parquet.ParquetDataset, 30, 3, 13, filesystem, 19
pyarrow.input_stream, 30, 1, 15, buffer_size, 9
pyarrow.py_buffer, 31, 1, 31, , 
pyarrow.chunked_array, 32, 1, 26, type, 6
pyarrow.int32, 32, 0, 32, , 
pyarrow.list_, 32, 1, 32, , 
pyarrow.plasma.connect, 34, 3, 23, num_retries, 1
pyarrow.timestamp, 41, 1, 33, tz, 8
pyarrow.field, 95, 2, 64, nullable, 24
pyarrow.Table.from_arrays, 97, 2, 93, names, 55
pyarrow.schema, 103, 1, 92, metadata, 10
pyarrow.Table.from_pandas, 129, 1, 72, preserve_index, 38
pyarrow.array, 550, 2, 270, type, 264
